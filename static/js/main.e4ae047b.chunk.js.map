{"version":3,"sources":["App.js","index.js"],"names":["AppWrapper","styled","div","ButtonWrapper","ScanButton","button","Wrapper","noop","App","webcamRef","React","useRef","useState","barcode","setBarcode","barcodeWorker","setBarcodeWorker","useEffect","worker","Worker","terminate","onmessage","e","scanningRef","current","console","log","data","success","setScanning","setButtonText","size","width","undefined","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","ratio","buttonText","scanning","interval","setInterval","createImageBitmap","video","then","image","postMessage","clearInterval","audio","videoConstraints","facingMode","aspectRatio","resizeMode","ref","onUserMedia","stream","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAIMA,EAAaC,IAAOC,IAAV,kEAKVC,EAAgBF,IAAOC,IAAV,sEAKbE,EAAaH,IAAOI,OAAV,oJASVC,EAAUL,IAAOC,IAAV,8LAUPK,EAAO,kBAAM,MAkIJC,MAhIf,WACE,IAAMC,EAAYC,IAAMC,SADX,EAGiBD,IAAME,SAAS,IAHhC,mBAGNC,EAHM,KAGGC,EAHH,OAO6BJ,IAAME,WAPnC,mBAONG,EAPM,KAOSC,EAPT,KAQbN,IAAMO,WAAU,WACd,IAAMC,EAAS,IAAIC,OAAO,cAE1B,OADAH,EAAiBE,GACV,WACLA,EAAOE,eAER,IAEHV,IAAMO,WAAU,WAcd,OAbIF,IACFA,EAAcM,UAAY,SAACC,GACzBC,EAAYC,SAAU,EACtBC,QAAQC,IAAI,mBACRJ,EAAEK,KAAKC,UACTd,EAAWQ,EAAEK,KAAKd,SAClBgB,GAAY,GACZC,EAAc,QACdL,QAAQC,IAAR,mBAAwBJ,EAAEK,KAAKd,aAK9B,WACDE,IAAeA,EAAcM,UAAYd,MAE9C,CAACQ,IAEJ,IAAMgB,EA8DR,WAAyB,MAGarB,IAAME,SAAS,CACjDoB,WAAOC,EACPC,YAAQD,IALa,mBAGhBE,EAHgB,KAGJC,EAHI,KA4BvB,OApBA1B,IAAMO,WAAU,WAEd,SAASoB,IAEPD,EAAc,CACZJ,MAAOM,OAAOC,WACdL,OAAQI,OAAOE,cAWnB,OANAF,OAAOG,iBAAiB,SAAUJ,GAGlCA,IAGO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,IAEIF,EA1FMQ,GAEPC,EADcb,EAAKG,QAAUH,EAAKC,MAEpCD,EAAKC,MAAQD,EAAKG,OAClBH,EAAKG,OAASH,EAAKC,MAvCV,EAyCuBtB,IAAME,SAAS,QAzCtC,mBAyCNiC,EAzCM,KAyCMf,EAzCN,KA2CPP,EAAcb,IAAMC,QAAO,GA3CpB,EA4CmBD,IAAME,UAAS,GA5ClC,mBA4CNkC,EA5CM,KA4CIjB,EA5CJ,KAsEb,OAnBAnB,IAAMO,WAAU,WACd,GAAIF,IAAkBF,GAAWiC,EAAU,CACzCrB,QAAQC,IAAI,CAACX,gBAAeF,UAASiC,aASrC,IAAMC,EAAWC,aARjB,WACEvB,QAAQC,IAAIH,EAAYC,SACpBD,EAAYC,UAChBD,EAAYC,SAAU,EACtBM,EAAc,YACdmB,kBAAkBxC,EAAUe,QAAQ0B,OAAOC,MAAK,SAAAC,GAAK,OAAIrC,EAAcsC,YAAYD,SAG3C,KAC1C,OAAO,WACL3B,QAAQC,IAAR,4BAAiCqB,IACjCO,cAAcP,OAGjB,CAAClC,EAASE,EAAe+B,IAG1B,eAAC9C,EAAD,WACE,cAAC,IAAD,CACEuD,OAAO,EACPvB,MAAOD,EAAKC,MACZE,OAAQH,EAAKG,OACbsB,iBAAkB,CAChBC,WAAY,cACZC,YAAad,EACbe,WAAY,kBAEdC,IAAKnD,EACLoD,YAAa,SAACC,GACZrC,QAAQC,IAAI,kBAKhB,cAACpB,EAAD,UACE,cAACH,EAAD,UACE,cAACC,EAAD,CAAY2D,QA5CP,WACXlC,GAAaiB,GACbhB,EAA6B,SAAfe,EAAwB,WAAa,SA0C7C,SAA4BA,YCzHtCmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e4ae047b.chunk.js","sourcesContent":["import Webcam from \"react-webcam\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst AppWrapper = styled.div`\n  height: 100%;\n  overflow: hidden;\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst ScanButton = styled.button`\n  margin: 20px;\n  flex-grow: 1;\n  height: 30px;\n  background-color: black;\n  color: white;\n  border-radius: 15px;\n`;\n\nconst Wrapper = styled.div`\n  position: fixed;\n  bottom: 10px;\n  top: calc(100% - 100px);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst noop = () => null;\n\nfunction App() {\n  const webcamRef = React.useRef();\n\n  const [barcode, setBarcode] = React.useState(\"\");\n  /**\n   * @type [Worker, (worker: Worker) => void]\n   */\n  const [barcodeWorker, setBarcodeWorker] = React.useState();\n  React.useEffect(() => {\n    const worker = new Worker(\"/worker.js\");\n    setBarcodeWorker(worker);\n    return () => {\n      worker.terminate();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (barcodeWorker) {\n      barcodeWorker.onmessage = (e) => {\n        scanningRef.current = false;\n        console.log(\"worker response\");\n        if (e.data.success) {\n          setBarcode(e.data.barcode);\n          setScanning(false);\n          setButtonText(\"Scan\")\n          console.log(`Barcode: ${e.data.barcode}`);\n        }\n      };\n    }\n\n    return () => {\n      if (barcodeWorker) barcodeWorker.onmessage = noop;\n    };\n  }, [barcodeWorker]);\n\n  const size = useWindowSize();\n  const isLandscape = size.height <= size.width;\n  const ratio = isLandscape\n    ? size.width / size.height\n    : size.height / size.width;\n\n  const [buttonText, setButtonText] = React.useState(\"Scan\");\n\n  const scanningRef = React.useRef(false);\n  const [scanning, setScanning] = React.useState(false);\n\n  const scan = () => {\n    setScanning(!scanning);\n    setButtonText(buttonText === \"Scan\" ? \"Scanning\" : \"Scan\");\n  };\n\n  React.useEffect(() => {\n    if (barcodeWorker && !barcode && scanning) {\n      console.log({barcodeWorker, barcode, scanning})\n      function findBarcode() {\n        console.log(scanningRef.current);\n        if (scanningRef.current) return;\n        scanningRef.current = true;\n        setButtonText(\"Scanning\");\n        createImageBitmap(webcamRef.current.video).then(image => barcodeWorker.postMessage(image));\n      }\n\n      const interval = setInterval(findBarcode, 300);\n      return () => {\n        console.log(`Clearing interval ${interval}`);\n        clearInterval(interval);\n      };\n    }\n  }, [barcode, barcodeWorker, scanning]);\n\n  return (\n    <AppWrapper>\n      <Webcam\n        audio={false}\n        width={size.width}\n        height={size.height}\n        videoConstraints={{\n          facingMode: \"environment\",\n          aspectRatio: ratio,\n          resizeMode: \"crop-and-scale\",\n        }}\n        ref={webcamRef}\n        onUserMedia={(stream) => {\n          console.log(\"onUserMedia\")\n          // setCameraCapabilities(stream.getVideoTracks()[0].getCapabilities());\n          // setInitialSettings(stream.getVideoTracks()[0].getSettings());\n        }}\n      />\n      <Wrapper>\n        <ButtonWrapper>\n          <ScanButton onClick={scan}>{buttonText}</ScanButton>\n        </ButtonWrapper>\n      </Wrapper>\n    </AppWrapper>\n  );\n}\n\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = React.useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  React.useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}